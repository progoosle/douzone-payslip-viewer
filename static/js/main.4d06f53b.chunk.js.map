{"version":3,"sources":["lib/decryptor.ts","PaperForm.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["crypto","require","iconv","forge","OctetIV","offset","headerSize","length","OctetSalt","OctetCipherText","Decryptor","hashSaltPassword","salt","key","hash","createHash","update","digest","slice","getValue","buffer","octet","sourceStart","sourceEnd","bufferSize","result","Buffer","alloc","copy","decrypt","encodedData","from","iv","cipherContent","encodedKey","encode","addBOM","saltedKey","cipher","rc2","startDecrypting","util","createBuffer","finish","decode","output","data","layout","xs","span","sm","md","lg","PaperForm","onSubmit","React","useState","fileError","setFileError","keyError","setKeyError","content","setContent","undefined","uploadFile","setUploadFile","setKey","labelCol","wrapperCol","Item","label","validateStatus","help","required","name","noStyle","valuePropName","Dragger","multiple","showUploadList","showDownloadIcon","showRemoveIcon","action","customRequest","options","file","fileReader","FileReader","onload","onSuccess","onerror","onError","Error","readAsText","fileList","onChange","info","status","className","InboxOutlined","Password","placeholder","value","e","currentTarget","type","htmlType","onClick","isNaN","parseInt","cheerio","Title","Typography","Paragraph","App","decryptedPaper","setDecryptedPaper","load","$","val","console","log","error","title","srcDoc","style","display","width","height","href","GithubOutlined","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.4d06f53b.chunk.js","sourcesContent":["const crypto = require('crypto');\nconst iconv = require(\"iconv-lite\");\nconst forge = require('node-forge');\n\ntype OctetString = {\n    offset: number,\n    headerSize: number,\n    length: number\n}\n\nconst OctetIV: OctetString = {\n    offset: 56,\n    headerSize: 2,\n    length: 8\n};\n\nconst OctetSalt: OctetString = {\n    offset: 66,\n    headerSize: 2,\n    length: 16\n};\n\nconst OctetCipherText: OctetString = {\n    offset: 84,\n    headerSize: 4,\n    length: -1\n};\n\nexport class Decryptor {\n    private static hashSaltPassword = (salt: Buffer, key: Buffer): Buffer => {\n        const hash = crypto.createHash('SHA1');\n        hash.update(key);\n        hash.update(salt);\n\n        return hash.digest().slice(0, 16);\n    }\n\n    private static getValue = (buffer: Buffer, octet: OctetString): Buffer => {\n        const sourceStart = octet.offset + octet.headerSize;\n        const sourceEnd = (octet.length > 0) ? sourceStart + octet.length : buffer.length;\n        const bufferSize = sourceEnd - sourceStart;\n        const result = Buffer.alloc(bufferSize);\n        buffer.copy(result, 0, sourceStart, sourceEnd);\n        return result;\n    }\n\n    public static decrypt = (encodedData: string, key: string): string => {\n        // https://github.com/enghqii/PayPaperDecrypter\n        const buffer = Buffer.from(encodedData, 'base64');\n\n        const iv = Decryptor.getValue(buffer, OctetIV);\n        const salt = Decryptor.getValue(buffer, OctetSalt);\n        const cipherContent = Decryptor.getValue(buffer, OctetCipherText);\n\n        const encodedKey = iconv.encode(key, 'utf16le', {addBOM: false});\n        const saltedKey = Decryptor.hashSaltPassword(salt, encodedKey);\n\n        const cipher = forge.rc2.startDecrypting(forge.util.createBuffer(saltedKey), forge.util.createBuffer(iv), null);\n        cipher.update(forge.util.createBuffer(cipherContent));\n        cipher.finish();\n\n        return iconv.decode(new Buffer(cipher.output.data, 'binary'), 'utf16le');\n    }\n}\n","import React from 'react';\nimport {Form, Button, Upload, Input} from 'antd';\nimport {UploadFile, UploadChangeParam, RcCustomRequestOptions} from \"antd/es/upload/interface\";\n\nimport {InboxOutlined} from '@ant-design/icons';\n\nconst layout = {\n    xs: {span: 24},\n    sm: {span: 24},\n    md: {span: 24},\n    lg: {span: 24}\n};\n\nconst PaperForm = ({onSubmit}: { onSubmit: (content: string, key: string) => void }) => {\n    const [fileError, setFileError] = React.useState<boolean>(false);\n    const [keyError, setKeyError] = React.useState<boolean>(false);\n\n    const [content, setContent] = React.useState<string>(\"\")\n    const [uploadFile, setUploadFile] = React.useState<UploadFile | undefined>(undefined);\n    const [key, setKey] = React.useState<string>(\"\");\n\n    const onUpload = (options: RcCustomRequestOptions) => {\n        if (options.file.name.length < 4 || options.file.name.slice(-4) !== \".htm\") {\n            setFileError(true);\n            setUploadFile(undefined);\n            return;\n        }\n        let fileReader = new FileReader();\n        fileReader.onload = () => {\n            setContent(fileReader.result as string);\n            setFileError(false);\n\n            options.onSuccess({}, options.file);\n\n        };\n        fileReader.onerror = () => {\n            setFileError(true);\n\n            options.onError(new Error(), {}, options.file);\n        }\n        fileReader.readAsText(options.file);\n    }\n\n    const onUploadChange = (info: UploadChangeParam) => {\n        if (info.file.status === \"done\") {\n            setUploadFile(info.file);\n        }\n    };\n\n    const onClickSubmit = () => {\n        if (content === \"\") {\n            setFileError(true);\n            return;\n        }\n        if (isNaN(parseInt(key))) {\n            setKeyError(true);\n            return;\n        }\n        setKeyError(false);\n        onSubmit(content, key);\n    }\n\n    return (\n        <Form layout=\"vertical\" labelCol={layout} wrapperCol={layout}>\n            <Form.Item label={'급여명세서'} validateStatus={fileError ? \"error\" : undefined}\n                       help={fileError ? \"파일 불러오기에 실패했습니다.\" : undefined} required>\n                <Form.Item name=\"paper\" noStyle valuePropName={'filelist'}>\n                    <Upload.Dragger name=\"files\" multiple={false}\n                                    showUploadList={{showDownloadIcon: false, showRemoveIcon: false}}\n                                    action={''} customRequest={onUpload}\n                                    fileList={uploadFile !== undefined ? [uploadFile] : []}\n                                    onChange={onUploadChange}>\n                        <p className=\"ant-upload-drag-icon\">\n                            <InboxOutlined/>\n                        </p>\n                        <p className=\"ant-upload-text\">급여명세서 .htm 파일을 선택해주세요</p>\n                        <p className=\"ant-upload-hint\">드래그 앤 드랍 가능</p>\n                    </Upload.Dragger>\n                </Form.Item>\n            </Form.Item>\n            <Form.Item label=\"주민등록번호 뒤 7자리\" validateStatus={keyError ? \"error\" : undefined}\n                       help={keyError ? \"올바른 값을 입력해주세요.\" : undefined} required>\n                <Input.Password placeholder=\"*******\" value={key} onChange={(e) => {\n                    setKey(e.currentTarget.value)\n                }}/>\n            </Form.Item>\n            <Form.Item>\n                <Button type=\"primary\" htmlType=\"submit\" onClick={onClickSubmit}>\n                    확인\n                </Button>\n            </Form.Item>\n        </Form>\n    );\n}\n\nexport default PaperForm;\n","import React from 'react';\nimport {Row, Col, Typography, Divider} from 'antd';\nimport 'antd/dist/antd.css';\nimport PaperForm from \"./PaperForm\";\nimport {Decryptor} from \"./lib/decryptor\";\nimport {GithubOutlined} from \"@ant-design/icons\";\n\nconst cheerio = require('cheerio');\nconst {Title, Paragraph} = Typography;\n\n\nconst layout = {\n    xs: {span: 24},\n    sm: {span: 22, offset: 1},\n    md: {span: 20, offset: 2},\n    lg: {span: 18, offset: 3}\n}\n\nfunction App() {\n    const [decryptedPaper, setDecryptedPaper] = React.useState<string>(\"\");\n    const onSubmit = (content: string, key: string) => {\n        const $ = cheerio.load(content);\n        const data = $('#frm input[type=\"hidden\"]').val();\n        if (typeof data === 'undefined') {\n            console.error('죄송합니다. 복호화에 실패했습니다.');\n            return;\n        }\n        const result = Decryptor.decrypt(data, key);\n        if (result.slice(0, 5) !== \"<html\") {\n            console.error('복호화 실패');\n            return;\n        }\n        setDecryptedPaper(result);\n        console.log(result);\n    }\n\n    return (\n        <>\n            <Row>\n                <Col {...layout} >\n                    <Typography>\n                        <Title>더존 급여명세서 뷰어</Title>\n                    </Typography>\n                    <Divider/>\n                    <PaperForm onSubmit={onSubmit}/>\n                    <Divider/>\n                </Col>\n            </Row>\n            <Row>\n                {decryptedPaper && <Col {...layout}>\n                    <iframe title={'view'} srcDoc={decryptedPaper} style={{display: 'block', width: '100%', height: '100vh'}}/>\n                </Col>}\n            </Row>\n            <Row>\n                <Col {...layout} >\n                    <Typography>\n                        <Paragraph>\n                            트래픽 분석을 위한 <a href=\"https://www.google.com/analytics/web/\">구글 애널리틱스</a> 기본 페이지 접속 정보 수집 외 <strong>급여명세서, 주민등록번호를 포함한 그 어떠한 정보도 수집하지 않으며, 또한 서버로 전송하지 않습니다.</strong> 모든 복호화 처리는 로컬에서 이루어집니다.\n                        </Paragraph>\n                        Developed by <a href=\"https://rajephon.dev\">rajephon</a> / <a href=\"https://github.com/rajephon/douzone-salary-certificate-viewer\">깃허브 <GithubOutlined /></a> / <a href=\"https://github.com/rajephon/douzone-salary-certificate-viewer/issues\">버그 리포트</a>\n                    </Typography>\n                </Col>\n            </Row>\n        </>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}